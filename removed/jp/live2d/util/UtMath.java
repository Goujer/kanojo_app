package jp.live2d.util;

public class UtMath {
    public static double DEG_TO_RAD_D = 0.017453292519943295d;
    public static float DEG_TO_RAD_F = 0.017453292f;
    public static double RAD_TO_DEG_D = 57.29577951308232d;
    public static float RAD_TO_DEG_F = 57.29578f;
    static final double[] sintable = {0.0d, 0.012368d, 0.024734d, 0.037097d, 0.049454d, 0.061803d, 0.074143d, 0.086471d, 0.098786d, 0.111087d, 0.12337d, 0.135634d, 0.147877d, 0.160098d, 0.172295d, 0.184465d, 0.196606d, 0.208718d, 0.220798d, 0.232844d, 0.244854d, 0.256827d, 0.268761d, 0.280654d, 0.292503d, 0.304308d, 0.316066d, 0.327776d, 0.339436d, 0.351044d, 0.362598d, 0.374097d, 0.385538d, 0.396921d, 0.408243d, 0.419502d, 0.430697d, 0.441826d, 0.452888d, 0.463881d, 0.474802d, 0.485651d, 0.496425d, 0.507124d, 0.517745d, 0.528287d, 0.538748d, 0.549126d, 0.559421d, 0.56963d, 0.579752d, 0.589785d, 0.599728d, 0.609579d, 0.619337d, 0.629d, 0.638567d, 0.648036d, 0.657406d, 0.666676d, 0.675843d, 0.684908d, 0.693867d, 0.70272d, 0.711466d, 0.720103d, 0.72863d, 0.737045d, 0.745348d, 0.753536d, 0.76161d, 0.769566d, 0.777405d, 0.785125d, 0.792725d, 0.800204d, 0.807561d, 0.814793d, 0.821901d, 0.828884d, 0.835739d, 0.842467d, 0.849066d, 0.855535d, 0.861873d, 0.868079d, 0.874153d, 0.880093d, 0.885898d, 0.891567d, 0.897101d, 0.902497d, 0.907754d, 0.912873d, 0.917853d, 0.922692d, 0.92739d, 0.931946d, 0.936359d, 0.940629d, 0.944755d, 0.948737d, 0.952574d, 0.956265d, 0.959809d, 0.963207d, 0.966457d, 0.96956d, 0.972514d, 0.97532d, 0.977976d, 0.980482d, 0.982839d, 0.985045d, 0.987101d, 0.989006d, 0.990759d, 0.992361d, 0.993811d, 0.995109d, 0.996254d, 0.997248d, 0.998088d, 0.998776d, 0.999312d, 0.999694d, 0.999924d, 1.0d};

    public static double getAngleNotAbs(float[] v1, float[] v2) {
        return getAngleDiff(Math.atan2((double) v1[1], (double) v1[0]), Math.atan2((double) v2[1], (double) v2[0]));
    }

    public static double getAngleDiff(double Q1, double Q2) {
        double ret = Q1 - Q2;
        while (ret < -3.141592653589793d) {
            ret += 6.283185307179586d;
        }
        while (ret > 3.141592653589793d) {
            ret -= 6.283185307179586d;
        }
        return ret;
    }

    public static double fsin(double x) {
        return Math.sin(x);
    }
}
